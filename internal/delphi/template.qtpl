{% package delphi %}

{% func DataTypesUnit(x *DataTypesSrc) %} {% collapsespace %}
unit {%s x.unitName %};{%s "\n" %}
{%s "\n" %} 
interface{%s "\n" %}
{%s renderUses(x.interfaceUses) %}
{%s "\n" %}
type {%s "\n" %}
    {% for _,t := range x.types %} 
    {%s "\n" %}
    {%s t.name %} {%s " " %} = class  {%s "\n" %}
    {%s "    " %}
    public  {%s "\n" %}
        {% for _,f := range t.fields %}
            {%s "        " %}
            F{%s f.name %} :
                {% if f.isArray %} 
                    TArray<{%s f.typeName %}>
                {% elseif f.isClass %} 
                    T{%s f.typeName %}
                {% else  %} 
                    {%s f.typeName %}
                {% endif %};{%s "\n" %}
        {% endfor %}
    {% if t.hasClassField()%}
        {%s "        " %}
        constructor Create; {%s "\n" %}
        {%s "        " %}
        destructor Destroy;  {%s "\n" %}
    {% endif %}
        {%s "        " %}
        function ToJsonString: string; {%s "\n" %}
        {%s "        " %}
        class function FromJsonString(AJsonString: string): {%s t.name %};  {%s "\n" %}
    end;  {%s "\n" %}
{% endfor %}
 {%s "\n" %}
implementation {%s "\n" %}
{%s renderUses(x.implUses) %}
{% for _,t := range x.types %}
//{%s "\n" %} 
// {%s t.name %}{%s "\n" %}
//{%s "\n" %}
{% if t.hasClassField()%}
constructor {%s t.name %}.Create;{%s "\n" %}
begin{%s "\n" %}
    {% for _,f := range t.fields %}
        {% if f.isClass %}
            {%s "    " %}
            F{%s f.name %} := {%s f.typeName %}.Create; {%s "\n" %}
        {% endif %}
    {% endfor %}
end;{%s "\n" %}

{%s "\n" %}

destructor {%s t.name %}.Destroy;{%s "\n" %}
begin
    {% for _,f := range t.fields %}
        {% if f.isClass %}
            {%s "\n    " %}
            if Assigned(F{%s f.name %}) then F{%s f.name %}.Free;
        {% endif %}
    {% endfor %}
{%s "\n" %}end;{%s "\n" %}
{%s "\n" %}
{% endif %}

function {%s t.name %}.ToJsonString: string;{%s "\n" %}
begin{%s "\n" %}
    {%s "    " %}result := TJson.ObjectToJsonString(self);{%s "\n" %}
end;{%s "\n" %}
{%s "\n" %}
class function {%s t.name %}.FromJsonString(AJsonString: string): {%s t.name %};{%s "\n" %}
begin{%s "\n" %}
    {%s "    " %}result := TJson.JsonToObject{%s= "<" %}{%s t.name %}{%s= ">" %}(AJsonString);{%s "\n" %}
end;{%s "\n" %}
{%s "\n" %}

{% endfor %}
{% endcollapsespace %}
end.
{% endfunc %}


{% func renderUses(units []string ) %}{% collapsespace %}
    {% if len(units) > 0 %}        
        uses 
            {% for _,unit := range units[:len(units)-1] %}
                {%v unit  %},
            {% endfor %}
            {%v units[len(units)-1]  %};
        {%s "\n" %}
    {% endif %}
{% endcollapsespace %}{% endfunc %}
