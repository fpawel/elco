// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package journal

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type entryTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *entryTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("entry").
func (v *entryTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *entryTableType) Columns() []string {
	return []string{"entry_id", "work_id", "created_at", "level", "message", "file", "line", "stack"}
}

// NewStruct makes a new struct for that view or table.
func (v *entryTableType) NewStruct() reform.Struct {
	return new(Entry)
}

// NewRecord makes a new record for that table.
func (v *entryTableType) NewRecord() reform.Record {
	return new(Entry)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *entryTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// EntryTable represents entry view or table in SQL database.
var EntryTable = &entryTableType{
	s: parse.StructInfo{Type: "Entry", SQLSchema: "", SQLName: "entry", Fields: []parse.FieldInfo{{Name: "EntryID", Type: "int64", Column: "entry_id"}, {Name: "WorkID", Type: "int64", Column: "work_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "Level", Type: "string", Column: "level"}, {Name: "Message", Type: "string", Column: "message"}, {Name: "File", Type: "string", Column: "file"}, {Name: "Line", Type: "int64", Column: "line"}, {Name: "Stack", Type: "string", Column: "stack"}}, PKFieldIndex: 0},
	z: new(Entry).Values(),
}

// String returns a string representation of this struct or record.
func (s Entry) String() string {
	res := make([]string, 8)
	res[0] = "EntryID: " + reform.Inspect(s.EntryID, true)
	res[1] = "WorkID: " + reform.Inspect(s.WorkID, true)
	res[2] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[3] = "Level: " + reform.Inspect(s.Level, true)
	res[4] = "Message: " + reform.Inspect(s.Message, true)
	res[5] = "File: " + reform.Inspect(s.File, true)
	res[6] = "Line: " + reform.Inspect(s.Line, true)
	res[7] = "Stack: " + reform.Inspect(s.Stack, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *Entry) Values() []interface{} {
	return []interface{}{
		s.EntryID,
		s.WorkID,
		s.CreatedAt,
		s.Level,
		s.Message,
		s.File,
		s.Line,
		s.Stack,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *Entry) Pointers() []interface{} {
	return []interface{}{
		&s.EntryID,
		&s.WorkID,
		&s.CreatedAt,
		&s.Level,
		&s.Message,
		&s.File,
		&s.Line,
		&s.Stack,
	}
}

// View returns View object for that struct.
func (s *Entry) View() reform.View {
	return EntryTable
}

// Table returns Table object for that record.
func (s *Entry) Table() reform.Table {
	return EntryTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *Entry) PKValue() interface{} {
	return s.EntryID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *Entry) PKPointer() interface{} {
	return &s.EntryID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *Entry) HasPK() bool {
	return s.EntryID != EntryTable.z[EntryTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *Entry) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.EntryID = int64(i64)
	} else {
		s.EntryID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = EntryTable
	_ reform.Struct = (*Entry)(nil)
	_ reform.Table  = EntryTable
	_ reform.Record = (*Entry)(nil)
	_ fmt.Stringer  = (*Entry)(nil)
)

type entryInfoTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *entryInfoTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("entry_info").
func (v *entryInfoTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *entryInfoTableType) Columns() []string {
	return []string{"entry_id", "work_id", "created_at", "level", "message", "file", "line", "stack", "work_name"}
}

// NewStruct makes a new struct for that view or table.
func (v *entryInfoTableType) NewStruct() reform.Struct {
	return new(EntryInfo)
}

// NewRecord makes a new record for that table.
func (v *entryInfoTableType) NewRecord() reform.Record {
	return new(EntryInfo)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *entryInfoTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// EntryInfoTable represents entry_info view or table in SQL database.
var EntryInfoTable = &entryInfoTableType{
	s: parse.StructInfo{Type: "EntryInfo", SQLSchema: "", SQLName: "entry_info", Fields: []parse.FieldInfo{{Name: "EntryID", Type: "int64", Column: "entry_id"}, {Name: "WorkID", Type: "int64", Column: "work_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "Level", Type: "string", Column: "level"}, {Name: "Message", Type: "string", Column: "message"}, {Name: "File", Type: "string", Column: "file"}, {Name: "Line", Type: "int64", Column: "line"}, {Name: "Stack", Type: "string", Column: "stack"}, {Name: "WorkName", Type: "string", Column: "work_name"}}, PKFieldIndex: 0},
	z: new(EntryInfo).Values(),
}

// String returns a string representation of this struct or record.
func (s EntryInfo) String() string {
	res := make([]string, 9)
	res[0] = "EntryID: " + reform.Inspect(s.EntryID, true)
	res[1] = "WorkID: " + reform.Inspect(s.WorkID, true)
	res[2] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[3] = "Level: " + reform.Inspect(s.Level, true)
	res[4] = "Message: " + reform.Inspect(s.Message, true)
	res[5] = "File: " + reform.Inspect(s.File, true)
	res[6] = "Line: " + reform.Inspect(s.Line, true)
	res[7] = "Stack: " + reform.Inspect(s.Stack, true)
	res[8] = "WorkName: " + reform.Inspect(s.WorkName, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *EntryInfo) Values() []interface{} {
	return []interface{}{
		s.EntryID,
		s.WorkID,
		s.CreatedAt,
		s.Level,
		s.Message,
		s.File,
		s.Line,
		s.Stack,
		s.WorkName,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *EntryInfo) Pointers() []interface{} {
	return []interface{}{
		&s.EntryID,
		&s.WorkID,
		&s.CreatedAt,
		&s.Level,
		&s.Message,
		&s.File,
		&s.Line,
		&s.Stack,
		&s.WorkName,
	}
}

// View returns View object for that struct.
func (s *EntryInfo) View() reform.View {
	return EntryInfoTable
}

// Table returns Table object for that record.
func (s *EntryInfo) Table() reform.Table {
	return EntryInfoTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *EntryInfo) PKValue() interface{} {
	return s.EntryID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *EntryInfo) PKPointer() interface{} {
	return &s.EntryID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *EntryInfo) HasPK() bool {
	return s.EntryID != EntryInfoTable.z[EntryInfoTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *EntryInfo) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.EntryID = int64(i64)
	} else {
		s.EntryID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = EntryInfoTable
	_ reform.Struct = (*EntryInfo)(nil)
	_ reform.Table  = EntryInfoTable
	_ reform.Record = (*EntryInfo)(nil)
	_ fmt.Stringer  = (*EntryInfo)(nil)
)

func init() {
	parse.AssertUpToDate(&EntryTable.s, new(Entry))
	parse.AssertUpToDate(&EntryInfoTable.s, new(EntryInfo))
}
