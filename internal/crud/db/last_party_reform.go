// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package db

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type lastPartyTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *lastPartyTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("last_party").
func (v *lastPartyTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *lastPartyTableType) Columns() []string {
	return []string{"party_id", "old_party_id", "created_at", "updated_at", "product_type_name", "concentration1", "concentration2", "concentration3", "note"}
}

// NewStruct makes a new struct for that view or table.
func (v *lastPartyTableType) NewStruct() reform.Struct {
	return new(LastParty)
}

// NewRecord makes a new record for that table.
func (v *lastPartyTableType) NewRecord() reform.Record {
	return new(LastParty)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *lastPartyTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// LastPartyTable represents last_party view or table in SQL database.
var LastPartyTable = &lastPartyTableType{
	s: parse.StructInfo{Type: "LastParty", SQLSchema: "", SQLName: "last_party", Fields: []parse.FieldInfo{{Name: "PartyID", Type: "int64", Column: "party_id"}, {Name: "OldPartyID", Type: "*string", Column: "old_party_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}, {Name: "ProductTypeName", Type: "string", Column: "product_type_name"}, {Name: "Concentration1", Type: "float64", Column: "concentration1"}, {Name: "Concentration2", Type: "float64", Column: "concentration2"}, {Name: "Concentration3", Type: "float64", Column: "concentration3"}, {Name: "Note", Type: "*string", Column: "note"}}, PKFieldIndex: 0},
	z: new(LastParty).Values(),
}

// String returns a string representation of this struct or record.
func (s LastParty) String() string {
	res := make([]string, 9)
	res[0] = "PartyID: " + reform.Inspect(s.PartyID, true)
	res[1] = "OldPartyID: " + reform.Inspect(s.OldPartyID, true)
	res[2] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[3] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[4] = "ProductTypeName: " + reform.Inspect(s.ProductTypeName, true)
	res[5] = "Concentration1: " + reform.Inspect(s.Concentration1, true)
	res[6] = "Concentration2: " + reform.Inspect(s.Concentration2, true)
	res[7] = "Concentration3: " + reform.Inspect(s.Concentration3, true)
	res[8] = "Note: " + reform.Inspect(s.Note, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *LastParty) Values() []interface{} {
	return []interface{}{
		s.PartyID,
		s.OldPartyID,
		s.CreatedAt,
		s.UpdatedAt,
		s.ProductTypeName,
		s.Concentration1,
		s.Concentration2,
		s.Concentration3,
		s.Note,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *LastParty) Pointers() []interface{} {
	return []interface{}{
		&s.PartyID,
		&s.OldPartyID,
		&s.CreatedAt,
		&s.UpdatedAt,
		&s.ProductTypeName,
		&s.Concentration1,
		&s.Concentration2,
		&s.Concentration3,
		&s.Note,
	}
}

// View returns View object for that struct.
func (s *LastParty) View() reform.View {
	return LastPartyTable
}

// Table returns Table object for that record.
func (s *LastParty) Table() reform.Table {
	return LastPartyTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *LastParty) PKValue() interface{} {
	return s.PartyID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *LastParty) PKPointer() interface{} {
	return &s.PartyID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *LastParty) HasPK() bool {
	return s.PartyID != LastPartyTable.z[LastPartyTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *LastParty) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.PartyID = int64(i64)
	} else {
		s.PartyID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = LastPartyTable
	_ reform.Struct = (*LastParty)(nil)
	_ reform.Table  = LastPartyTable
	_ reform.Record = (*LastParty)(nil)
	_ fmt.Stringer  = (*LastParty)(nil)
)

func init() {
	parse.AssertUpToDate(&LastPartyTable.s, new(LastParty))
}
