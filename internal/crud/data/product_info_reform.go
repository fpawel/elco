// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productInfoTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productInfoTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("product_info").
func (v *productInfoTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productInfoTableType) Columns() []string {
	return []string{"product_id", "party_id", "serial", "place", "product_type_name", "note", "i_f_minus20", "i_f_plus20", "i_f_plus50", "i_s_minus20", "i_s_plus20", "i_s_plus50", "i13", "i24", "i35", "i26", "i17", "not_measured", "production", "old_product_id", "self_product_type_name", "gas_name", "units_name", "scale", "noble_metal_content", "lifetime_months", "lc64", "points_method", "firmware", "concentration1", "concentration3", "k_sens20", "k_sens50", "d_fon20", "d_fon50", "d_not_measured", "ok_fon20", "ok_d_fon20", "ok_k_sens20", "ok_d_fon50", "ok_k_sens50", "ok_d_not_measured", "not_ok"}
}

// NewStruct makes a new struct for that view or table.
func (v *productInfoTableType) NewStruct() reform.Struct {
	return new(ProductInfo)
}

// NewRecord makes a new record for that table.
func (v *productInfoTableType) NewRecord() reform.Record {
	return new(ProductInfo)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productInfoTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductInfoTable represents product_info view or table in SQL database.
var ProductInfoTable = &productInfoTableType{
	s: parse.StructInfo{Type: "ProductInfo", SQLSchema: "", SQLName: "product_info", Fields: []parse.FieldInfo{{Name: "ProductID", Type: "int64", Column: "product_id"}, {Name: "PartyID", Type: "int64", Column: "party_id"}, {Name: "Serial", Type: "*int64", Column: "serial"}, {Name: "Place", Type: "int64", Column: "place"}, {Name: "ProductTypeName", Type: "*string", Column: "product_type_name"}, {Name: "Note", Type: "*string", Column: "note"}, {Name: "IFMinus20", Type: "*float64", Column: "i_f_minus20"}, {Name: "IFPlus20", Type: "*float64", Column: "i_f_plus20"}, {Name: "IFPlus50", Type: "*float64", Column: "i_f_plus50"}, {Name: "ISMinus20", Type: "*float64", Column: "i_s_minus20"}, {Name: "ISPlus20", Type: "*float64", Column: "i_s_plus20"}, {Name: "ISPlus50", Type: "*float64", Column: "i_s_plus50"}, {Name: "I13", Type: "*float64", Column: "i13"}, {Name: "I24", Type: "*float64", Column: "i24"}, {Name: "I35", Type: "*float64", Column: "i35"}, {Name: "I26", Type: "*float64", Column: "i26"}, {Name: "I17", Type: "*float64", Column: "i17"}, {Name: "NotMeasured", Type: "*float64", Column: "not_measured"}, {Name: "Production", Type: "bool", Column: "production"}, {Name: "OldProductID", Type: "*string", Column: "old_product_id"}, {Name: "SelfProductTypeName", Type: "*string", Column: "self_product_type_name"}, {Name: "GasName", Type: "*string", Column: "gas_name"}, {Name: "UnitsName", Type: "*string", Column: "units_name"}, {Name: "Scale", Type: "float64", Column: "scale"}, {Name: "NobleMetalContent", Type: "float64", Column: "noble_metal_content"}, {Name: "LifetimeMonths", Type: "int64", Column: "lifetime_months"}, {Name: "Lc64", Type: "bool", Column: "lc64"}, {Name: "PointsMethod", Type: "int64", Column: "points_method"}, {Name: "Firmware", Type: "[]uint8", Column: "firmware"}, {Name: "Concentration1", Type: "float64", Column: "concentration1"}, {Name: "Concentration3", Type: "float64", Column: "concentration3"}, {Name: "KSens20", Type: "*float64", Column: "k_sens20"}, {Name: "KSens50", Type: "*float64", Column: "k_sens50"}, {Name: "DFon20", Type: "*float64", Column: "d_fon20"}, {Name: "DFon50", Type: "*float64", Column: "d_fon50"}, {Name: "DNotMeasured", Type: "*float64", Column: "d_not_measured"}, {Name: "OKFon20", Type: "*bool", Column: "ok_fon20"}, {Name: "OKDFon20", Type: "*bool", Column: "ok_d_fon20"}, {Name: "OKKSens20", Type: "*bool", Column: "ok_k_sens20"}, {Name: "OKDFon50", Type: "*bool", Column: "ok_d_fon50"}, {Name: "OKKSens50", Type: "*bool", Column: "ok_k_sens50"}, {Name: "OKDNotMeasured", Type: "*bool", Column: "ok_d_not_measured"}, {Name: "NotOk", Type: "*bool", Column: "not_ok"}}, PKFieldIndex: 0},
	z: new(ProductInfo).Values(),
}

// String returns a string representation of this struct or record.
func (s ProductInfo) String() string {
	res := make([]string, 43)
	res[0] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[1] = "PartyID: " + reform.Inspect(s.PartyID, true)
	res[2] = "Serial: " + reform.Inspect(s.Serial, true)
	res[3] = "Place: " + reform.Inspect(s.Place, true)
	res[4] = "ProductTypeName: " + reform.Inspect(s.ProductTypeName, true)
	res[5] = "Note: " + reform.Inspect(s.Note, true)
	res[6] = "IFMinus20: " + reform.Inspect(s.IFMinus20, true)
	res[7] = "IFPlus20: " + reform.Inspect(s.IFPlus20, true)
	res[8] = "IFPlus50: " + reform.Inspect(s.IFPlus50, true)
	res[9] = "ISMinus20: " + reform.Inspect(s.ISMinus20, true)
	res[10] = "ISPlus20: " + reform.Inspect(s.ISPlus20, true)
	res[11] = "ISPlus50: " + reform.Inspect(s.ISPlus50, true)
	res[12] = "I13: " + reform.Inspect(s.I13, true)
	res[13] = "I24: " + reform.Inspect(s.I24, true)
	res[14] = "I35: " + reform.Inspect(s.I35, true)
	res[15] = "I26: " + reform.Inspect(s.I26, true)
	res[16] = "I17: " + reform.Inspect(s.I17, true)
	res[17] = "NotMeasured: " + reform.Inspect(s.NotMeasured, true)
	res[18] = "Production: " + reform.Inspect(s.Production, true)
	res[19] = "OldProductID: " + reform.Inspect(s.OldProductID, true)
	res[20] = "SelfProductTypeName: " + reform.Inspect(s.SelfProductTypeName, true)
	res[21] = "GasName: " + reform.Inspect(s.GasName, true)
	res[22] = "UnitsName: " + reform.Inspect(s.UnitsName, true)
	res[23] = "Scale: " + reform.Inspect(s.Scale, true)
	res[24] = "NobleMetalContent: " + reform.Inspect(s.NobleMetalContent, true)
	res[25] = "LifetimeMonths: " + reform.Inspect(s.LifetimeMonths, true)
	res[26] = "Lc64: " + reform.Inspect(s.Lc64, true)
	res[27] = "PointsMethod: " + reform.Inspect(s.PointsMethod, true)
	res[28] = "Firmware: " + reform.Inspect(s.Firmware, true)
	res[29] = "Concentration1: " + reform.Inspect(s.Concentration1, true)
	res[30] = "Concentration3: " + reform.Inspect(s.Concentration3, true)
	res[31] = "KSens20: " + reform.Inspect(s.KSens20, true)
	res[32] = "KSens50: " + reform.Inspect(s.KSens50, true)
	res[33] = "DFon20: " + reform.Inspect(s.DFon20, true)
	res[34] = "DFon50: " + reform.Inspect(s.DFon50, true)
	res[35] = "DNotMeasured: " + reform.Inspect(s.DNotMeasured, true)
	res[36] = "OKFon20: " + reform.Inspect(s.OKFon20, true)
	res[37] = "OKDFon20: " + reform.Inspect(s.OKDFon20, true)
	res[38] = "OKKSens20: " + reform.Inspect(s.OKKSens20, true)
	res[39] = "OKDFon50: " + reform.Inspect(s.OKDFon50, true)
	res[40] = "OKKSens50: " + reform.Inspect(s.OKKSens50, true)
	res[41] = "OKDNotMeasured: " + reform.Inspect(s.OKDNotMeasured, true)
	res[42] = "NotOk: " + reform.Inspect(s.NotOk, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProductInfo) Values() []interface{} {
	return []interface{}{
		s.ProductID,
		s.PartyID,
		s.Serial,
		s.Place,
		s.ProductTypeName,
		s.Note,
		s.IFMinus20,
		s.IFPlus20,
		s.IFPlus50,
		s.ISMinus20,
		s.ISPlus20,
		s.ISPlus50,
		s.I13,
		s.I24,
		s.I35,
		s.I26,
		s.I17,
		s.NotMeasured,
		s.Production,
		s.OldProductID,
		s.SelfProductTypeName,
		s.GasName,
		s.UnitsName,
		s.Scale,
		s.NobleMetalContent,
		s.LifetimeMonths,
		s.Lc64,
		s.PointsMethod,
		s.Firmware,
		s.Concentration1,
		s.Concentration3,
		s.KSens20,
		s.KSens50,
		s.DFon20,
		s.DFon50,
		s.DNotMeasured,
		s.OKFon20,
		s.OKDFon20,
		s.OKKSens20,
		s.OKDFon50,
		s.OKKSens50,
		s.OKDNotMeasured,
		s.NotOk,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProductInfo) Pointers() []interface{} {
	return []interface{}{
		&s.ProductID,
		&s.PartyID,
		&s.Serial,
		&s.Place,
		&s.ProductTypeName,
		&s.Note,
		&s.IFMinus20,
		&s.IFPlus20,
		&s.IFPlus50,
		&s.ISMinus20,
		&s.ISPlus20,
		&s.ISPlus50,
		&s.I13,
		&s.I24,
		&s.I35,
		&s.I26,
		&s.I17,
		&s.NotMeasured,
		&s.Production,
		&s.OldProductID,
		&s.SelfProductTypeName,
		&s.GasName,
		&s.UnitsName,
		&s.Scale,
		&s.NobleMetalContent,
		&s.LifetimeMonths,
		&s.Lc64,
		&s.PointsMethod,
		&s.Firmware,
		&s.Concentration1,
		&s.Concentration3,
		&s.KSens20,
		&s.KSens50,
		&s.DFon20,
		&s.DFon50,
		&s.DNotMeasured,
		&s.OKFon20,
		&s.OKDFon20,
		&s.OKKSens20,
		&s.OKDFon50,
		&s.OKKSens50,
		&s.OKDNotMeasured,
		&s.NotOk,
	}
}

// View returns View object for that struct.
func (s *ProductInfo) View() reform.View {
	return ProductInfoTable
}

// Table returns Table object for that record.
func (s *ProductInfo) Table() reform.Table {
	return ProductInfoTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductInfo) PKValue() interface{} {
	return s.ProductID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductInfo) PKPointer() interface{} {
	return &s.ProductID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ProductInfo) HasPK() bool {
	return s.ProductID != ProductInfoTable.z[ProductInfoTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *ProductInfo) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ProductID = int64(i64)
	} else {
		s.ProductID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = ProductInfoTable
	_ reform.Struct = (*ProductInfo)(nil)
	_ reform.Table  = ProductInfoTable
	_ reform.Record = (*ProductInfo)(nil)
	_ fmt.Stringer  = (*ProductInfo)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductInfoTable.s, new(ProductInfo))
}
