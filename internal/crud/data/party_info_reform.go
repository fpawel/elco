// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type partyInfoTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *partyInfoTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("party_info").
func (v *partyInfoTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *partyInfoTableType) Columns() []string {
	return []string{"party_id", "old_party_id", "created_at", "updated_at", "product_type_name", "concentration1", "concentration2", "concentration3", "note", "year", "month", "day", "last"}
}

// NewStruct makes a new struct for that view or table.
func (v *partyInfoTableType) NewStruct() reform.Struct {
	return new(PartyInfo)
}

// NewRecord makes a new record for that table.
func (v *partyInfoTableType) NewRecord() reform.Record {
	return new(PartyInfo)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *partyInfoTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// PartyInfoTable represents party_info view or table in SQL database.
var PartyInfoTable = &partyInfoTableType{
	s: parse.StructInfo{Type: "PartyInfo", SQLSchema: "", SQLName: "party_info", Fields: []parse.FieldInfo{{Name: "PartyID", Type: "int64", Column: "party_id"}, {Name: "OldPartyID", Type: "*string", Column: "old_party_id"}, {Name: "CreatedAt", Type: "time.Time", Column: "created_at"}, {Name: "UpdatedAt", Type: "time.Time", Column: "updated_at"}, {Name: "ProductTypeName", Type: "string", Column: "product_type_name"}, {Name: "Concentration1", Type: "float64", Column: "concentration1"}, {Name: "Concentration2", Type: "float64", Column: "concentration2"}, {Name: "Concentration3", Type: "float64", Column: "concentration3"}, {Name: "Note", Type: "*string", Column: "note"}, {Name: "Year", Type: "int64", Column: "year"}, {Name: "Month", Type: "int64", Column: "month"}, {Name: "Day", Type: "int64", Column: "day"}, {Name: "Last", Type: "bool", Column: "last"}}, PKFieldIndex: 0},
	z: new(PartyInfo).Values(),
}

// String returns a string representation of this struct or record.
func (s PartyInfo) String() string {
	res := make([]string, 13)
	res[0] = "PartyID: " + reform.Inspect(s.PartyID, true)
	res[1] = "OldPartyID: " + reform.Inspect(s.OldPartyID, true)
	res[2] = "CreatedAt: " + reform.Inspect(s.CreatedAt, true)
	res[3] = "UpdatedAt: " + reform.Inspect(s.UpdatedAt, true)
	res[4] = "ProductTypeName: " + reform.Inspect(s.ProductTypeName, true)
	res[5] = "Concentration1: " + reform.Inspect(s.Concentration1, true)
	res[6] = "Concentration2: " + reform.Inspect(s.Concentration2, true)
	res[7] = "Concentration3: " + reform.Inspect(s.Concentration3, true)
	res[8] = "Note: " + reform.Inspect(s.Note, true)
	res[9] = "Year: " + reform.Inspect(s.Year, true)
	res[10] = "Month: " + reform.Inspect(s.Month, true)
	res[11] = "Day: " + reform.Inspect(s.Day, true)
	res[12] = "Last: " + reform.Inspect(s.Last, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *PartyInfo) Values() []interface{} {
	return []interface{}{
		s.PartyID,
		s.OldPartyID,
		s.CreatedAt,
		s.UpdatedAt,
		s.ProductTypeName,
		s.Concentration1,
		s.Concentration2,
		s.Concentration3,
		s.Note,
		s.Year,
		s.Month,
		s.Day,
		s.Last,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *PartyInfo) Pointers() []interface{} {
	return []interface{}{
		&s.PartyID,
		&s.OldPartyID,
		&s.CreatedAt,
		&s.UpdatedAt,
		&s.ProductTypeName,
		&s.Concentration1,
		&s.Concentration2,
		&s.Concentration3,
		&s.Note,
		&s.Year,
		&s.Month,
		&s.Day,
		&s.Last,
	}
}

// View returns View object for that struct.
func (s *PartyInfo) View() reform.View {
	return PartyInfoTable
}

// Table returns Table object for that record.
func (s *PartyInfo) Table() reform.Table {
	return PartyInfoTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *PartyInfo) PKValue() interface{} {
	return s.PartyID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *PartyInfo) PKPointer() interface{} {
	return &s.PartyID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *PartyInfo) HasPK() bool {
	return s.PartyID != PartyInfoTable.z[PartyInfoTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *PartyInfo) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.PartyID = int64(i64)
	} else {
		s.PartyID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = PartyInfoTable
	_ reform.Struct = (*PartyInfo)(nil)
	_ reform.Table  = PartyInfoTable
	_ reform.Record = (*PartyInfo)(nil)
	_ fmt.Stringer  = (*PartyInfo)(nil)
)

func init() {
	parse.AssertUpToDate(&PartyInfoTable.s, new(PartyInfo))
}
