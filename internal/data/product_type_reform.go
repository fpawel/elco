// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productTypeTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productTypeTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("product_type").
func (v *productTypeTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productTypeTableType) Columns() []string {
	return []string{"product_type_name", "gas_name", "units_name", "scale", "noble_metal_content", "lifetime_months", "min_fon", "max_fon", "max_d_fon", "min_k_sens20", "max_k_sens20", "min_k_sens50", "max_k_sens50", "min_d_temp", "max_d_temp", "max_d_not_measured", "k_sens20", "max_d1", "max_d2", "max_d3", "points_method"}
}

// NewStruct makes a new struct for that view or table.
func (v *productTypeTableType) NewStruct() reform.Struct {
	return new(ProductType)
}

// NewRecord makes a new record for that table.
func (v *productTypeTableType) NewRecord() reform.Record {
	return new(ProductType)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productTypeTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductTypeTable represents product_type view or table in SQL database.
var ProductTypeTable = &productTypeTableType{
	s: parse.StructInfo{Type: "ProductType", SQLSchema: "", SQLName: "product_type", Fields: []parse.FieldInfo{{Name: "ProductTypeName", Type: "string", Column: "product_type_name"}, {Name: "GasName", Type: "string", Column: "gas_name"}, {Name: "UnitsName", Type: "string", Column: "units_name"}, {Name: "Scale", Type: "float64", Column: "scale"}, {Name: "NobleMetalContent", Type: "float64", Column: "noble_metal_content"}, {Name: "LifetimeMonths", Type: "int64", Column: "lifetime_months"}, {Name: "MinFon", Type: "sql.NullFloat64", Column: "min_fon"}, {Name: "MaxFon", Type: "sql.NullFloat64", Column: "max_fon"}, {Name: "MaxDFon", Type: "sql.NullFloat64", Column: "max_d_fon"}, {Name: "MinKSens20", Type: "sql.NullFloat64", Column: "min_k_sens20"}, {Name: "MaxKSens20", Type: "sql.NullFloat64", Column: "max_k_sens20"}, {Name: "MinKSens50", Type: "sql.NullFloat64", Column: "min_k_sens50"}, {Name: "MaxKSens50", Type: "sql.NullFloat64", Column: "max_k_sens50"}, {Name: "MinDTemp", Type: "sql.NullFloat64", Column: "min_d_temp"}, {Name: "MaxDTemp", Type: "sql.NullFloat64", Column: "max_d_temp"}, {Name: "MaxDNotMeasured", Type: "sql.NullFloat64", Column: "max_d_not_measured"}, {Name: "KSens20", Type: "sql.NullFloat64", Column: "k_sens20"}, {Name: "MaxD1", Type: "sql.NullFloat64", Column: "max_d1"}, {Name: "MaxD2", Type: "sql.NullFloat64", Column: "max_d2"}, {Name: "MaxD3", Type: "sql.NullFloat64", Column: "max_d3"}, {Name: "PointsMethod", Type: "int64", Column: "points_method"}}, PKFieldIndex: 0},
	z: new(ProductType).Values(),
}

// String returns a string representation of this struct or record.
func (s ProductType) String() string {
	res := make([]string, 21)
	res[0] = "ProductTypeName: " + reform.Inspect(s.ProductTypeName, true)
	res[1] = "GasName: " + reform.Inspect(s.GasName, true)
	res[2] = "UnitsName: " + reform.Inspect(s.UnitsName, true)
	res[3] = "Scale: " + reform.Inspect(s.Scale, true)
	res[4] = "NobleMetalContent: " + reform.Inspect(s.NobleMetalContent, true)
	res[5] = "LifetimeMonths: " + reform.Inspect(s.LifetimeMonths, true)
	res[6] = "MinFon: " + reform.Inspect(s.MinFon, true)
	res[7] = "MaxFon: " + reform.Inspect(s.MaxFon, true)
	res[8] = "MaxDFon: " + reform.Inspect(s.MaxDFon, true)
	res[9] = "MinKSens20: " + reform.Inspect(s.MinKSens20, true)
	res[10] = "MaxKSens20: " + reform.Inspect(s.MaxKSens20, true)
	res[11] = "MinKSens50: " + reform.Inspect(s.MinKSens50, true)
	res[12] = "MaxKSens50: " + reform.Inspect(s.MaxKSens50, true)
	res[13] = "MinDTemp: " + reform.Inspect(s.MinDTemp, true)
	res[14] = "MaxDTemp: " + reform.Inspect(s.MaxDTemp, true)
	res[15] = "MaxDNotMeasured: " + reform.Inspect(s.MaxDNotMeasured, true)
	res[16] = "KSens20: " + reform.Inspect(s.KSens20, true)
	res[17] = "MaxD1: " + reform.Inspect(s.MaxD1, true)
	res[18] = "MaxD2: " + reform.Inspect(s.MaxD2, true)
	res[19] = "MaxD3: " + reform.Inspect(s.MaxD3, true)
	res[20] = "PointsMethod: " + reform.Inspect(s.PointsMethod, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProductType) Values() []interface{} {
	return []interface{}{
		s.ProductTypeName,
		s.GasName,
		s.UnitsName,
		s.Scale,
		s.NobleMetalContent,
		s.LifetimeMonths,
		s.MinFon,
		s.MaxFon,
		s.MaxDFon,
		s.MinKSens20,
		s.MaxKSens20,
		s.MinKSens50,
		s.MaxKSens50,
		s.MinDTemp,
		s.MaxDTemp,
		s.MaxDNotMeasured,
		s.KSens20,
		s.MaxD1,
		s.MaxD2,
		s.MaxD3,
		s.PointsMethod,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProductType) Pointers() []interface{} {
	return []interface{}{
		&s.ProductTypeName,
		&s.GasName,
		&s.UnitsName,
		&s.Scale,
		&s.NobleMetalContent,
		&s.LifetimeMonths,
		&s.MinFon,
		&s.MaxFon,
		&s.MaxDFon,
		&s.MinKSens20,
		&s.MaxKSens20,
		&s.MinKSens50,
		&s.MaxKSens50,
		&s.MinDTemp,
		&s.MaxDTemp,
		&s.MaxDNotMeasured,
		&s.KSens20,
		&s.MaxD1,
		&s.MaxD2,
		&s.MaxD3,
		&s.PointsMethod,
	}
}

// View returns View object for that struct.
func (s *ProductType) View() reform.View {
	return ProductTypeTable
}

// Table returns Table object for that record.
func (s *ProductType) Table() reform.Table {
	return ProductTypeTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductType) PKValue() interface{} {
	return s.ProductTypeName
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductType) PKPointer() interface{} {
	return &s.ProductTypeName
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ProductType) HasPK() bool {
	return s.ProductTypeName != ProductTypeTable.z[ProductTypeTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *ProductType) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ProductTypeName = string(i64)
	} else {
		s.ProductTypeName = pk.(string)
	}
}

// check interfaces
var (
	_ reform.View   = ProductTypeTable
	_ reform.Struct = (*ProductType)(nil)
	_ reform.Table  = ProductTypeTable
	_ reform.Record = (*ProductType)(nil)
	_ fmt.Stringer  = (*ProductType)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductTypeTable.s, new(ProductType))
}
