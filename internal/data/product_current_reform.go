// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productCurrentTableType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productCurrentTableType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("product_current").
func (v *productCurrentTableType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productCurrentTableType) Columns() []string {
	return []string{"product_current_id", "stored_at", "product_id", "temperature", "gas", "current_value", "note"}
}

// NewStruct makes a new struct for that view or table.
func (v *productCurrentTableType) NewStruct() reform.Struct {
	return new(ProductCurrent)
}

// NewRecord makes a new record for that table.
func (v *productCurrentTableType) NewRecord() reform.Record {
	return new(ProductCurrent)
}

// PKColumnIndex returns an index of primary key column for that table in SQL database.
func (v *productCurrentTableType) PKColumnIndex() uint {
	return uint(v.s.PKFieldIndex)
}

// ProductCurrentTable represents product_current view or table in SQL database.
var ProductCurrentTable = &productCurrentTableType{
	s: parse.StructInfo{Type: "ProductCurrent", SQLSchema: "", SQLName: "product_current", Fields: []parse.FieldInfo{{Name: "ProductCurrentID", Type: "int64", Column: "product_current_id"}, {Name: "StoredAt", Type: "time.Time", Column: "stored_at"}, {Name: "ProductID", Type: "int64", Column: "product_id"}, {Name: "Temperature", Type: "Temperature", Column: "temperature"}, {Name: "Gas", Type: "int", Column: "gas"}, {Name: "CurrentValue", Type: "float64", Column: "current_value"}, {Name: "Note", Type: "string", Column: "note"}}, PKFieldIndex: 0},
	z: new(ProductCurrent).Values(),
}

// String returns a string representation of this struct or record.
func (s ProductCurrent) String() string {
	res := make([]string, 7)
	res[0] = "ProductCurrentID: " + reform.Inspect(s.ProductCurrentID, true)
	res[1] = "StoredAt: " + reform.Inspect(s.StoredAt, true)
	res[2] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[3] = "Temperature: " + reform.Inspect(s.Temperature, true)
	res[4] = "Gas: " + reform.Inspect(s.Gas, true)
	res[5] = "CurrentValue: " + reform.Inspect(s.CurrentValue, true)
	res[6] = "Note: " + reform.Inspect(s.Note, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProductCurrent) Values() []interface{} {
	return []interface{}{
		s.ProductCurrentID,
		s.StoredAt,
		s.ProductID,
		s.Temperature,
		s.Gas,
		s.CurrentValue,
		s.Note,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProductCurrent) Pointers() []interface{} {
	return []interface{}{
		&s.ProductCurrentID,
		&s.StoredAt,
		&s.ProductID,
		&s.Temperature,
		&s.Gas,
		&s.CurrentValue,
		&s.Note,
	}
}

// View returns View object for that struct.
func (s *ProductCurrent) View() reform.View {
	return ProductCurrentTable
}

// Table returns Table object for that record.
func (s *ProductCurrent) Table() reform.Table {
	return ProductCurrentTable
}

// PKValue returns a value of primary key for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductCurrent) PKValue() interface{} {
	return s.ProductCurrentID
}

// PKPointer returns a pointer to primary key field for that record.
// Returned interface{} value is never untyped nil.
func (s *ProductCurrent) PKPointer() interface{} {
	return &s.ProductCurrentID
}

// HasPK returns true if record has non-zero primary key set, false otherwise.
func (s *ProductCurrent) HasPK() bool {
	return s.ProductCurrentID != ProductCurrentTable.z[ProductCurrentTable.s.PKFieldIndex]
}

// SetPK sets record primary key.
func (s *ProductCurrent) SetPK(pk interface{}) {
	if i64, ok := pk.(int64); ok {
		s.ProductCurrentID = int64(i64)
	} else {
		s.ProductCurrentID = pk.(int64)
	}
}

// check interfaces
var (
	_ reform.View   = ProductCurrentTable
	_ reform.Struct = (*ProductCurrent)(nil)
	_ reform.Table  = ProductCurrentTable
	_ reform.Record = (*ProductCurrent)(nil)
	_ fmt.Stringer  = (*ProductCurrent)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductCurrentTable.s, new(ProductCurrent))
}
