// Code generated by gopkg.in/reform.v1. DO NOT EDIT.

package data

import (
	"fmt"
	"strings"

	"gopkg.in/reform.v1"
	"gopkg.in/reform.v1/parse"
)

type productTemperatureCurrentKSensViewType struct {
	s parse.StructInfo
	z []interface{}
}

// Schema returns a schema name in SQL database ("").
func (v *productTemperatureCurrentKSensViewType) Schema() string {
	return v.s.SQLSchema
}

// Name returns a view or table name in SQL database ("product_temperature_current_k_sens").
func (v *productTemperatureCurrentKSensViewType) Name() string {
	return v.s.SQLName
}

// Columns returns a new slice of column names for that view or table in SQL database.
func (v *productTemperatureCurrentKSensViewType) Columns() []string {
	return []string{"product_id", "temperature", "current", "k_sens"}
}

// NewStruct makes a new struct for that view or table.
func (v *productTemperatureCurrentKSensViewType) NewStruct() reform.Struct {
	return new(ProductTemperatureCurrentKSens)
}

// ProductTemperatureCurrentKSensView represents product_temperature_current_k_sens view or table in SQL database.
var ProductTemperatureCurrentKSensView = &productTemperatureCurrentKSensViewType{
	s: parse.StructInfo{Type: "ProductTemperatureCurrentKSens", SQLSchema: "", SQLName: "product_temperature_current_k_sens", Fields: []parse.FieldInfo{{Name: "ProductID", Type: "int64", Column: "product_id"}, {Name: "Temperature", Type: "float64", Column: "temperature"}, {Name: "Current", Type: "*float64", Column: "current"}, {Name: "KSens", Type: "*float64", Column: "k_sens"}}, PKFieldIndex: -1},
	z: new(ProductTemperatureCurrentKSens).Values(),
}

// String returns a string representation of this struct or record.
func (s ProductTemperatureCurrentKSens) String() string {
	res := make([]string, 4)
	res[0] = "ProductID: " + reform.Inspect(s.ProductID, true)
	res[1] = "Temperature: " + reform.Inspect(s.Temperature, true)
	res[2] = "Current: " + reform.Inspect(s.Current, true)
	res[3] = "KSens: " + reform.Inspect(s.KSens, true)
	return strings.Join(res, ", ")
}

// Values returns a slice of struct or record field values.
// Returned interface{} values are never untyped nils.
func (s *ProductTemperatureCurrentKSens) Values() []interface{} {
	return []interface{}{
		s.ProductID,
		s.Temperature,
		s.Current,
		s.KSens,
	}
}

// Pointers returns a slice of pointers to struct or record fields.
// Returned interface{} values are never untyped nils.
func (s *ProductTemperatureCurrentKSens) Pointers() []interface{} {
	return []interface{}{
		&s.ProductID,
		&s.Temperature,
		&s.Current,
		&s.KSens,
	}
}

// View returns View object for that struct.
func (s *ProductTemperatureCurrentKSens) View() reform.View {
	return ProductTemperatureCurrentKSensView
}

// check interfaces
var (
	_ reform.View   = ProductTemperatureCurrentKSensView
	_ reform.Struct = (*ProductTemperatureCurrentKSens)(nil)
	_ fmt.Stringer  = (*ProductTemperatureCurrentKSens)(nil)
)

func init() {
	parse.AssertUpToDate(&ProductTemperatureCurrentKSensView.s, new(ProductTemperatureCurrentKSens))
}
