// This file is automatically generated by qtc from "notify.qtpl".
// See https://github.com/valyala/quicktemplate for details.

//line notify.qtpl:1
package delphirpc

//line notify.qtpl:3
import (
	qtio422016 "io"

	qt422016 "github.com/valyala/quicktemplate"
)

//line notify.qtpl:3
var (
	_ = qtio422016.Copy
	_ = qt422016.AcquireByteBuffer
)

//line notify.qtpl:3
func (x *NotifyServicesSrc) StreamUnit(qw422016 *qt422016.Writer) {
	//line notify.qtpl:3
	qw422016.N().S(`
unit `)
	//line notify.qtpl:4
	qw422016.E().S(x.unitName)
	//line notify.qtpl:4
	qw422016.N().S(`;

interface
`)
	//line notify.qtpl:7
	qw422016.E().S(uses(x.interfaceUses))
	//line notify.qtpl:7
	qw422016.N().S(`
type
    `)
	//line notify.qtpl:9
	for t, ht := range x.types {
		//line notify.qtpl:9
		qw422016.E().S(ht)
		//line notify.qtpl:9
		qw422016.N().S(` = reference to procedure (x:`)
		//line notify.qtpl:9
		qw422016.E().S(t)
		//line notify.qtpl:9
		qw422016.N().S(`);
    `)
		//line notify.qtpl:10
	}
	//line notify.qtpl:10
	qw422016.N().S(`

procedure HandleCopydata(var Message: TMessage);

`)
	//line notify.qtpl:14
	for _, m := range x.services {
		//line notify.qtpl:14
		qw422016.N().S(`procedure SetOn`)
		//line notify.qtpl:14
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:14
		qw422016.N().S(`( AHandler : `)
		//line notify.qtpl:14
		qw422016.E().S(m.handlerType)
		//line notify.qtpl:14
		qw422016.N().S(`);
`)
		//line notify.qtpl:15
	}
	//line notify.qtpl:15
	qw422016.N().S(`
procedure NotifyServices_SetEnabled(enabled:boolean);

implementation 
`)
	//line notify.qtpl:19
	qw422016.E().S(uses(x.implUses))
	//line notify.qtpl:19
	qw422016.N().S(`

type
    TServerAppCmd = (`)
	//line notify.qtpl:22
	for _, m := range x.services[:len(x.services)-1] {
		//line notify.qtpl:22
		qw422016.N().S(`Cmd`)
		//line notify.qtpl:22
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:22
		qw422016.N().S(`, `)
		//line notify.qtpl:22
	}
	//line notify.qtpl:22
	qw422016.N().S(`
    Cmd`)
	//line notify.qtpl:23
	qw422016.E().S(x.services[len(x.services)-1].serviceName)
	//line notify.qtpl:23
	qw422016.N().S(`);

    type _deserializer = record
        class function deserialize<T>(str:string):T;static;
    end;

var
    `)
	//line notify.qtpl:30
	for _, m := range x.services {
		//line notify.qtpl:30
		qw422016.N().S(`_On`)
		//line notify.qtpl:30
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:30
		qw422016.N().S(` : `)
		//line notify.qtpl:30
		qw422016.E().S(strEnsureFirstT(m.typeName))
		//line notify.qtpl:30
		qw422016.N().S(`Handler;
    `)
		//line notify.qtpl:31
	}
	//line notify.qtpl:31
	qw422016.N().S(`_enabled:boolean;

class function _deserializer.deserialize<T>(str:string):T;
begin
    TgoBsonSerializer.Deserialize(str, Result);
end;

procedure NotifyServices_SetEnabled(enabled:boolean);
begin
   _enabled := enabled;
end;

procedure HandleCopydata(var Message: TMessage);
var
    cd: PCOPYDATASTRUCT;
    cmd: TServerAppCmd;
    str:string;
begin
    if not _enabled then
        exit;
    cd := PCOPYDATASTRUCT(Message.LParam);
    cmd := TServerAppCmd(Message.WParam);
    Message.result := 1;
    SetString(str, PWideChar(cd.lpData), cd.cbData div 2);
    case cmd of
        `)
	//line notify.qtpl:56
	for _, m := range x.services {
		//line notify.qtpl:56
		qw422016.N().S(`Cmd`)
		//line notify.qtpl:56
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:56
		qw422016.N().S(`:
        begin
            if not Assigned(_On`)
		//line notify.qtpl:58
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:58
		qw422016.N().S(`) then
                raise Exception.Create('_On`)
		//line notify.qtpl:59
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:59
		qw422016.N().S(` must be set');
            _On`)
		//line notify.qtpl:60
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:60
		qw422016.N().S(`(`)
		//line notify.qtpl:60
		qw422016.N().S(m.instructionGetFromStr)
		//line notify.qtpl:60
		qw422016.N().S(`);
        end;
        `)
		//line notify.qtpl:62
	}
	//line notify.qtpl:62
	qw422016.N().S(`
    else
        raise Exception.Create('wrong message: ' + IntToStr(Message.WParam));
    end;
end;

`)
	//line notify.qtpl:68
	for _, m := range x.services {
		//line notify.qtpl:68
		qw422016.N().S(`procedure SetOn`)
		//line notify.qtpl:68
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:68
		qw422016.N().S(`( AHandler : `)
		//line notify.qtpl:68
		qw422016.E().S(m.handlerType)
		//line notify.qtpl:68
		qw422016.N().S(`);
begin
    if Assigned(_On`)
		//line notify.qtpl:70
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:70
		qw422016.N().S(`) then
        raise Exception.Create('_On`)
		//line notify.qtpl:71
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:71
		qw422016.N().S(` already set');
    _On`)
		//line notify.qtpl:72
		qw422016.E().S(m.serviceName)
		//line notify.qtpl:72
		qw422016.N().S(` := AHandler;
end;
`)
		//line notify.qtpl:74
	}
	//line notify.qtpl:74
	qw422016.N().S(`

initialization
    _enabled := false;

end.`)
//line notify.qtpl:79
}

//line notify.qtpl:79
func (x *NotifyServicesSrc) WriteUnit(qq422016 qtio422016.Writer) {
	//line notify.qtpl:79
	qw422016 := qt422016.AcquireWriter(qq422016)
	//line notify.qtpl:79
	x.StreamUnit(qw422016)
	//line notify.qtpl:79
	qt422016.ReleaseWriter(qw422016)
//line notify.qtpl:79
}

//line notify.qtpl:79
func (x *NotifyServicesSrc) Unit() string {
	//line notify.qtpl:79
	qb422016 := qt422016.AcquireByteBuffer()
	//line notify.qtpl:79
	x.WriteUnit(qb422016)
	//line notify.qtpl:79
	qs422016 := string(qb422016.B)
	//line notify.qtpl:79
	qt422016.ReleaseByteBuffer(qb422016)
	//line notify.qtpl:79
	return qs422016
//line notify.qtpl:79
}
