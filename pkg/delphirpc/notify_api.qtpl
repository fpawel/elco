// // Code generated. DO NOT EDIT.
{% package delphirpc %}

{% func (x *NotifyServicesSrc) GoFile() %}
package notify

import (
	"github.com/fpawel/elco/pkg/copydata"
	{% for imp := range x.goImports %}"{%s imp %}"
    {% endfor %}
)

type msg int

type W = *copydata.NotifyWindow

const (
    msg{%s x.services[0].serviceName %} msg = iota
    {% for _,m := range x.services[1:] %}msg{%s m.serviceName %}
    {% endfor %}
)

var
    msgName = map[msg]string{
        {% for _,m := range x.services%}msg{%s m.serviceName %}:"{%s m.serviceName %}",
        {% endfor %}
    }

func FormatMsg(msgCode uintptr) string {
    s,_ := msgName[msg(msgCode)]
    return s
}

{% for _,m := range x.services %}func {%s m.serviceName %}(w W, arg {%s m.goType %}) {
    w.{%s m.notifyFunc %}( uintptr(msg{%s m.serviceName %}), {%s= m.instructionArg %} )
}
{% if m.notifyFunc == "NotifyStr" %}func {%s m.serviceName %}f(w W, format string, a ...interface{}) {
    w.Notifyf( uintptr(msg{%s m.serviceName %}), format, a... )
}{% endif %}
{% endfor %}



{% endfunc %}